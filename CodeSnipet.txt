====How to remove all the spaces and \n\r in a String?
let text = "This \n is a st\tri\rng"
let test = String(text.filter { !" \n\t\r".contains($0) })

- lấy đường dẫn file (sử dụng RealmSwift)
	print("Duong dan file: \(Realm.Configuration.defaultConfiguration.fileURL)")

- lấy full link trong alamofire

extension Request {
    public func debugLog() -> Self {
        #if DEBUG
            debugPrint("=======================================")
            debugPrint(self)
            debugPrint("=======================================")
        #endif
        return self
    }
}

// gọi ra

  Alamofire.request(url).debugLog()
            .responseJSON( completionHandler: { response in
   })

- Remove ký tự bất kỳ trong chuỗi String
        var phrase = """
		Any long charactor
	"""
        let vowels: Set<Character> = ["\\", "[", "]"]
        phrase.removeAll(where: { vowels.contains($0) })
- Action trong alert
	        let alert = UIAlertController(title: "Thông báo".language(), message: "Bạn chắc chắn xoá", preferredStyle: .alert)
                alert.addAction(UIAlertAction(title: "KHÔNG".language(), style: .default, handler: nil))
                
                alert.addAction(UIAlertAction(title: "CÓ".language(), style: .default, handler: { (alertAction) in
                    // do something
                }))
                self.present(alert, animated: true, completion: nil)


Downlload ảnh:
	import UIKit

extension UIImageView {
    func dowloadFromServer(url: URL, contentMode mode: UIView.ContentMode = .scaleAspectFit) {
        contentMode = mode
        URLSession.shared.dataTask(with: url) { data, response, error in
            guard
                let httpURLResponse = response as? HTTPURLResponse, httpURLResponse.statusCode == 200,
                let mimeType = response?.mimeType, mimeType.hasPrefix("image"),
                let data = data, error == nil,
                let image = UIImage(data: data)
                else { return }
            DispatchQueue.main.async() {
                self.image = image
            }
            }.resume()
    }
    
    func dowloadFromServer(link: String, contentMode mode: UIView.ContentMode = .scaleAspectFit) {
        guard let url = URL(string: link) else { return }
        dowloadFromServer(url: url, contentMode: mode)
    }
}

sử dụng: ảnh. dowloadFromServer(link: String)
	 ảnh. dowloadFromServer(url: URL)


// mở rộng để add param cho url
extension URL {

func appendingParams(_ queryItem: String, value: String?) -> URL {

guard var urlComponents = URLComponents(string: absoluteString) else { return absoluteURL }

// Create array of existing query items
var queryItems: [URLQueryItem] = urlComponents.queryItems ??  []

// Create query item
let queryItem = URLQueryItem(name: queryItem, value: value)

// Append the new query item in the existing query items array
queryItems.append(queryItem)

// Append updated query items array in the url component object
urlComponents.queryItems = queryItems

// Returns the url from new url components
return urlComponents.url!
}
}

sử dụng
let url = URL(string: "https://www.thecocktaildb.com/api/json/v1/1/search.php")
let finalURL = url?.appendingParams("s", value: s)

BaseRouter.shared.callAPI(url: finalURL!) { (data: BaseDataModel) in
self.drinks = data.drinks
self.tableView.reloadData()
}


KẺ ĐƯỜNG LINE CẠNH CỦA BUTTON
let bottomLine = UIView(frame: CGRect(x: 0, y: connectLinkSubButton.bounds.height, width: connectLinkSubButton.bounds.width, height: 1))
        bottomLine.backgroundColor = UIColor.red
        connectLinkSubButton.addSubview(bottomLine)


VỊ TRÍ CỦA IMAGE IN BUTTON
dropdownButton.imageEdgeInsets = UIEdgeInsets(top: 0, left: dropdownButton.bounds.width - (dropdownButton.titleLabel?.bounds.width ?? 0), bottom: 0, right: 0)
dropdownButton.titleLabel?.bounds.width là tiêu đề button

Vị trí của ảnh so với chữ tiêu đề trong button (bên phải)
dropdownButton.semanticContentAttribute = UIApplication.shared
        .userInterfaceLayoutDirection == .rightToLeft ? .forceLeftToRight : .forceRightToLeft

=================================================
// Hàm lọc. Dùng cho search và lọc append
filtered = data.filter { word in
            word.lowercased().contains(searchText.lowercased())
        }
filerred là mảng kết quả. data là mảng nguồn. (lọc mảng data append vào mảng filtered)



=================================================
Ẩn bàn phím textField khi nhập xong
    @IBOutlet var text: UITextField! {
      didSet {
       text.delegate = self
      }
}

func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    textField.resignFirstResponder()
    return true
}

//TextView
trong viewDidload() 
        textView.delegate = self
    

    /* Updated for Swift 4 */
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if(text == "\n") {
            textView.resignFirstResponder()
            return false
        }
        return true
    }

    /* Older versions of Swift */
    func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {
        if(text == "\n") {
            textView.resignFirstResponder()
            return false
        }
        return true
    }


=========
Click button bàn phím thực hiện action
UISearchBarDelegate {
    func updateSearchResultsForSearchController(searchController: UISearchController) {
        if searchController.searchBar.text?.count ?? 0 < 15 {
            
        }

    }

func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        view.endEditing(true)
    }

===========
LỌC Tìm Kiếm:
Cách 1:
filteredArray = arrDicts.filter({word in
            word.lowercased().hasPrefix(keyword.lowercased())
        })

filteredArray là kết quả sau khi lọc mảng arrDicts với từ khoá là keyword

Cách 2:
func filtering() {
        resultArray = sourceArray.filter({ (laptop: String) in
            laptop.lowercased().contains(searchTextField.text!.lowercased())
        })
}

hàm này chạy để vừa search vừa hiển thị ra kết quả tìm kiếm
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
    }

===============
Lưu ý khi thực hiện xong bài này. Nhập xong với lọc và vừa nhập vừa lọc ra kết quả. Action trong keyboard, textField...
    Ẩn bàn phím khi thực hiện action. Ẩn khi ấn ra ngoài.
link chi tiết: https://github.com/dangduycuong/MasterSearch

override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)

	// Ẩn bàn phím khi ấn ra bên ngoài
        let tapGestureReconizer = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        tapGestureReconizer.cancelsTouchesInView = false
        view.addGestureRecognizer(tapGestureReconizer)
    }
    
    @objc func dismissKeyboard() {
        view.endEditing(true)
    }


=============================================
	//Giới hạn số ký tự nhập vào searchBar

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchBar.text!.length() > 16 {
            var searchText = searchBar.text!
            let range = searchText.index(searchText.startIndex, offsetBy: 16)..<searchText.endIndex
            searchText.removeSubrange(range)
            searchBar.text = searchText
        }
    }





====Trim Space
    var trimSpace = "  Let's trim all the whitespace  "
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let trimmedString = trimSpace.trimmingCharacters(in: .whitespacesAndNewlines)
        print(trimmedString)

	//result: Let's trim all the whitespace
    }








=====full màn hình khi chuyển màn trong iOS 13.2
    @IBAction func nextVCAction(_ sender: UIButton) {
        
//        present(vc!, animated: true, completion: nil)
//
//        let vc = UIViewController()
//        let vc = DetailVC()
        let vc = storyboard?.instantiateViewController(identifier: "DetailVC") as? DetailVC
        vc?.modalPresentationStyle = .fullScreen //or .overFullScreen for transparency
        self.present(vc!, animated: true, completion: nil)
    }



====LoadMore
func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        if self.stopLoadMore {
            return
        }
        let endScrolling = scrollView.contentOffset.y + scrollView.frame.size.height
        if endScrolling >= scrollView.contentSize.height - 30 && endScrolling <= scrollView.contentSize.height + 30 {
            self.pageIndex += 1
            self.getListCableLane(laneCode: self.searchTextField.text ?? "")
//            if self.isBTSStation {
//                self.getListCableLane(laneCode: self.searchTextField.text ?? "")
//            } else {
//
//            }
        }
    }
====Lấy toạ độ 4 góc của màn hình trong google map
    func mapView(_ mapView: GMSMapView, didChange position: GMSCameraPosition) {
        let projection = mapView.projection.visibleRegion()

        let topLeftCorner: CLLocationCoordinate2D = projection.farLeft
        let topRightCorner: CLLocationCoordinate2D = projection.farRight
        let bottomLeftCorner: CLLocationCoordinate2D = projection.nearLeft
        let bottomRightCorner: CLLocationCoordinate2D = projection.nearRight
        print("Toạ độ: ", topLeftCorner, topRightCorner, bottomLeftCorner, bottomRightCorner)
    }

====Vừa nhập vừa lọc trên textField
searchBarTextField.addTarget(self, action: #selector(searchRecords), for: .editingChanged)


====Action trên marker google map
func mapView(_ mapView: GMSMapView, didTap marker: GMSMarker) -> Bool {
	print("chạm vào marker", marker.title as Any)
        apiType = .findByMapFrame
        setValueParams()
        findByMapFrame(params: params)
        return true
}




====lấy index trên marker
mảng để marker: listStation
mảng để quản lý marker: var markers = [GMSMarker]()
trong func marker append marker vào markers:
    //Đánh dấu các nhà trạm trên map
    func loadListCritialPointsToMap() {
	markers.removeAll()
        for i in 0..<listStation.count {
            if let lat = listStation[i].latitude, let lng = listStation[i].longtitude {
                let marker = GMSMarker()
                marker.position = CLLocationCoordinate2D(latitude: lat, longitude: lng)
                marker.title = listStation[i].address
                marker.icon = GMSMarker.markerImage(with: UIColor.gray)
                
                markers.append(marker) //append marker to markers to manager
                
                marker.map = viewMap
            }
        }
    }

//Action when tapped in to marker (only marker). Get index of listStation
    func mapView(_ mapView: GMSMapView, didTap marker: GMSMarker) -> Bool {
        print("chạm vào marker", marker.title as Any)
        
        if let index = markers.index(of: marker) {
            let tappedStation = listStation[index]
            diaChiTextField.text = tappedStation.address
            chuTramTextField.text = tappedStation.houseOwnerName
            sdtChuTramTextField.text = tappedStation.houseOwnerPhone
        }
        
        popupView.isHidden = false
        
        apiType = .findByMapFrame
        setValueParams()
        findByMapFrame(params: params)
        return true
    }


====tỉ lệ layout trong code
extension NSLayoutConstraint {
    func constraintWithMultiplier(_ multiplier: CGFloat) -> NSLayoutConstraint {
        return NSLayoutConstraint(item: self.firstItem!, attribute: self.firstAttribute, relatedBy: self.relation, toItem: self.secondItem, attribute: self.secondAttribute, multiplier: multiplier, constant: self.constant)
    }
}

Usage:

let newConstraint = constraintToChange.constraintWithMultiplier(0.75)
view.removeConstraint(constraintToChange)
view.addConstraint(newConstraint)
view.layoutIfNeeded()
constraintToChange = newConstraint