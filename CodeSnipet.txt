- How to remove all the spaces and \n\r in a String?
let text = "This \n is a st\tri\rng"
let test = String(text.filter { !" \n\t\r".contains($0) })

- lấy đường dẫn file (sử dụng RealmSwift)
	print("Duong dan file: \(Realm.Configuration.defaultConfiguration.fileURL)")

- lấy full link trong alamofire

extension Request {
    public func debugLog() -> Self {
        #if DEBUG
            debugPrint("=======================================")
            debugPrint(self)
            debugPrint("=======================================")
        #endif
        return self
    }
}

// gọi ra

  Alamofire.request(url).debugLog()
            .responseJSON( completionHandler: { response in
   })

- Remove ký tự bất kỳ trong chuỗi String
        var phrase = """
		Any long charactor
	"""
        let vowels: Set<Character> = ["\\", "[", "]"]
        phrase.removeAll(where: { vowels.contains($0) })
- Action trong alert
	        let alert = UIAlertController(title: "Thông báo".language(), message: "Bạn chắc chắn xoá", preferredStyle: .alert)
                alert.addAction(UIAlertAction(title: "KHÔNG".language(), style: .default, handler: nil))
                
                alert.addAction(UIAlertAction(title: "CÓ".language(), style: .default, handler: { (alertAction) in
                    // do something
                }))
                self.present(alert, animated: true, completion: nil)


Downlload ảnh:
	import UIKit

extension UIImageView {
    func dowloadFromServer(url: URL, contentMode mode: UIView.ContentMode = .scaleAspectFit) {
        contentMode = mode
        URLSession.shared.dataTask(with: url) { data, response, error in
            guard
                let httpURLResponse = response as? HTTPURLResponse, httpURLResponse.statusCode == 200,
                let mimeType = response?.mimeType, mimeType.hasPrefix("image"),
                let data = data, error == nil,
                let image = UIImage(data: data)
                else { return }
            DispatchQueue.main.async() {
                self.image = image
            }
            }.resume()
    }
    
    func dowloadFromServer(link: String, contentMode mode: UIView.ContentMode = .scaleAspectFit) {
        guard let url = URL(string: link) else { return }
        dowloadFromServer(url: url, contentMode: mode)
    }
}

sử dụng: ảnh. dowloadFromServer(link: String)
	 ảnh. dowloadFromServer(url: URL)


// mở rộng để add param cho url
extension URL {

func appendingParams(_ queryItem: String, value: String?) -> URL {

guard var urlComponents = URLComponents(string: absoluteString) else { return absoluteURL }

// Create array of existing query items
var queryItems: [URLQueryItem] = urlComponents.queryItems ??  []

// Create query item
let queryItem = URLQueryItem(name: queryItem, value: value)

// Append the new query item in the existing query items array
queryItems.append(queryItem)

// Append updated query items array in the url component object
urlComponents.queryItems = queryItems

// Returns the url from new url components
return urlComponents.url!
}
}

sử dụng
let url = URL(string: "https://www.thecocktaildb.com/api/json/v1/1/search.php")
let finalURL = url?.appendingParams("s", value: s)

BaseRouter.shared.callAPI(url: finalURL!) { (data: BaseDataModel) in
self.drinks = data.drinks
self.tableView.reloadData()
}


KẺ ĐƯỜNG LINE CẠNH CỦA BUTTON
let bottomLine = UIView(frame: CGRect(x: 0, y: connectLinkSubButton.bounds.height, width: connectLinkSubButton.bounds.width, height: 1))
        bottomLine.backgroundColor = UIColor.red
        connectLinkSubButton.addSubview(bottomLine)


VỊ TRÍ CỦA IMAGE IN BUTTON
dropdownButton.imageEdgeInsets = UIEdgeInsets(top: 0, left: dropdownButton.bounds.width - (dropdownButton.titleLabel?.bounds.width ?? 0), bottom: 0, right: 0)
dropdownButton.titleLabel?.bounds.width là tiêu đề button

Vị trí của ảnh so với chữ tiêu đề trong button (bên phải)
dropdownButton.semanticContentAttribute = UIApplication.shared
        .userInterfaceLayoutDirection == .rightToLeft ? .forceLeftToRight : .forceRightToLeft

=================================================
// Hàm lọc. Dùng cho search và lọc append
filtered = data.filter { word in
            word.lowercased().contains(searchText.lowercased())
        }
filerred là mảng kết quả. data là mảng nguồn. (lọc mảng data append vào mảng filtered)














































